--- simpleclient_servlet/src/test/java/io/prometheus/client/filter/MetricsFilterTest.java	2018-04-11 14:05:02.972748642 +0300
+++ simpleclient_servlet/src/test/java/io/prometheus/client/filter/MetricsFilterTest.java.old	2018-04-11 14:04:52.880818559 +0300
@@ -2,7 +2,6 @@
 
 import io.prometheus.client.Collector;
 import io.prometheus.client.CollectorRegistry;
-import org.eclipse.jetty.http.HttpMethods;
 import org.junit.After;
 import org.junit.Test;
 import org.mockito.invocation.InvocationOnMock;
@@ -48,7 +47,7 @@
         HttpServletRequest req = mock(HttpServletRequest.class);
 
         when(req.getRequestURI()).thenReturn("/foo/bar/baz/bang/zilch/zip/nada");
-        when(req.getMethod()).thenReturn(HttpMethods.GET);
+        when(req.getMethod()).thenReturn("GET");
 
         HttpServletResponse res = mock(HttpServletResponse.class);
         FilterChain c = mock(FilterChain.class);
@@ -57,7 +56,7 @@
 
         verify(c).doFilter(req, res);
 
-        final Double sampleValue = CollectorRegistry.defaultRegistry.getSampleValue(metricName + "_count", new String[]{"path", "method"}, new String[]{"/foo/bar/baz/bang", HttpMethods.GET});
+        final Double sampleValue = CollectorRegistry.defaultRegistry.getSampleValue(metricName + "_count", new String[]{"path", "method"}, new String[]{"/foo/bar/baz/bang", "GET"});
         assertNotNull(sampleValue);
         assertEquals(1, sampleValue, 0.0001);
     }
@@ -68,7 +67,7 @@
         final String path = "/foo/bar/baz/bang/zilch/zip/nada";
 
         when(req.getRequestURI()).thenReturn(path);
-        when(req.getMethod()).thenReturn(HttpMethods.GET);
+        when(req.getMethod()).thenReturn("GET");
 
         HttpServletResponse res = mock(HttpServletResponse.class);
         FilterChain c = mock(FilterChain.class);
@@ -84,7 +83,7 @@
         verify(c).doFilter(req, res);
 
 
-        final Double sampleValue = CollectorRegistry.defaultRegistry.getSampleValue(name + "_count", new String[]{"path", "method"}, new String[]{path, HttpMethods.GET});
+        final Double sampleValue = CollectorRegistry.defaultRegistry.getSampleValue(name + "_count", new String[]{"path", "method"}, new String[]{path, "GET"});
         assertNotNull(sampleValue);
         assertEquals(1, sampleValue, 0.0001);
     }
@@ -94,7 +93,7 @@
         HttpServletRequest req = mock(HttpServletRequest.class);
         final String path = "/foo/bar/baz/bang";
         when(req.getRequestURI()).thenReturn(path);
-        when(req.getMethod()).thenReturn(HttpMethods.POST);
+        when(req.getMethod()).thenReturn("POST");
 
         FilterChain c = mock(FilterChain.class);
         doAnswer(new Answer<Void>() {
@@ -116,7 +115,7 @@
         HttpServletResponse res = mock(HttpServletResponse.class);
         constructed.doFilter(req, res, c);
 
-        final Double sum = CollectorRegistry.defaultRegistry.getSampleValue("foobar_baz_filter_duration_seconds_sum", new String[]{"path", "method"}, new String[]{path, HttpMethods.POST});
+        final Double sum = CollectorRegistry.defaultRegistry.getSampleValue("foobar_baz_filter_duration_seconds_sum", new String[]{"path", "method"}, new String[]{path, "POST"});
         assertNotNull(sum);
         assertEquals(0.1, sum, 0.01);
     }
@@ -126,7 +125,7 @@
         HttpServletRequest req = mock(HttpServletRequest.class);
         final String path = "/foo/bar/baz/bang";
         when(req.getRequestURI()).thenReturn(path);
-        when(req.getMethod()).thenReturn(HttpMethods.POST);
+        when(req.getMethod()).thenReturn("POST");
 
         FilterChain c = mock(FilterChain.class);
         doAnswer(new Answer<Void>() {
@@ -148,13 +147,13 @@
 
         f.doFilter(req, res, c);
 
-        final Double sum = CollectorRegistry.defaultRegistry.getSampleValue("foo_sum", new String[]{"path", "method"}, new String[]{"/foo", HttpMethods.POST});
+        final Double sum = CollectorRegistry.defaultRegistry.getSampleValue("foo_sum", new String[]{"path", "method"}, new String[]{"/foo", "POST"});
         assertEquals(0.1, sum, 0.01);
 
-        final Double le05 = CollectorRegistry.defaultRegistry.getSampleValue("foo_bucket", new String[]{"path", "method", "le"}, new String[]{"/foo", HttpMethods.POST, "0.05"});
+        final Double le05 = CollectorRegistry.defaultRegistry.getSampleValue("foo_bucket", new String[]{"path", "method", "le"}, new String[]{"/foo", "POST", "0.05"});
         assertNotNull(le05);
         assertEquals(0, le05, 0.01);
-        final Double le15 = CollectorRegistry.defaultRegistry.getSampleValue("foo_bucket", new String[]{"path", "method", "le"}, new String[]{"/foo", HttpMethods.POST, "0.15"});
+        final Double le15 = CollectorRegistry.defaultRegistry.getSampleValue("foo_bucket", new String[]{"path", "method", "le"}, new String[]{"/foo", "POST", "0.15"});
         assertNotNull(le15);
         assertEquals(1, le15, 0.01);
 
